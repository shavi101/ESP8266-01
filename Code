#include <Adafruit_ESP8266.h>
#include <SoftwareSerial.h>

String request="GET";

#define ESP_RX   9//RX
#define ESP_TX   10//TX
#define ESP_RST  8
SoftwareSerial softser(ESP_RX, ESP_TX);
Stream *esp = &softser; //Stream is the base class for character and binary based streams. It is not called directly, but invoked whenever you use a function that relies on it
// * after the class name would be the c++ notation for a pointer

// can be a SoftwareSerial stream, or Serial/Serial1/etc. for UART.

Adafruit_ESP8266 wifi(&softser, &Serial, ESP_RST);
//Creating an Adafruit_ESP8266 object with 3 parameters passed. 
// Must declare output stream before Adafruit_ESP8266 constructor; 

#define ESP_SSID "SSID" // Your network name here
#define ESP_PASS "PASS" // Your network password here

#define HOST     "api.pushingbox.com"  //Host to contact    
#define PORT     80                   //80 = HTTP default port


#define REPLYBUFFSIZ 255
char replybuffer[REPLYBUFFSIZ]; 
//......................Forward declarations/Methods will be implemented towards the end of the code.........
uint8_t getReply(char const *send, uint16_t timeout = 500, boolean echo = true);
uint8_t espreadline(uint16_t timeout = 500, boolean multiline = false);//is an integer type that can store 16 bits (2 bytes atleast)
boolean sendCheckReply(char const *send, char const *reply, uint16_t timeout = 500);
//-----------------------------------------------------------------
enum {WIFI_ERROR_NONE = 0, WIFI_ERROR_AT, WIFI_ERROR_RST, WIFI_ERROR_SSIDPWD, WIFI_ERROR_SERVER, WIFI_ERROR_UNKNOWN};

void setup() {
    char buffer[50];
    delay(2000);
    Serial.begin(57600);
   // comment/replace this if you are using something other than v 0.9.2.4!
    wifi.setBootMarker(F("Version:0.9.2.4]\r\n\r\nready"));
  
    softser.begin(9600); // Soft serial connection to ESP8266
  
    Serial.println(F("Adafruit ESP8266"));//You can pass flash-memory(non-volatile arduino memory) based strings to Serial.print() by 
    wrapping them with F().
  
    // Test if module is ready
    Serial.print(F("Hard reset..."));
    if (!wifi.hardReset()) {
      Serial.println(F("no response from module."));
      for (;;);
    }
    Serial.println(F("OK."));
  
    Serial.print(F("Soft reset..."));
    if (!wifi.softReset()) {
      Serial.println(F("no response from module."));
      for (;;);
    }
    Serial.println(F("OK."));
  
    Serial.print(F("Checking firmware version..."));
    wifi.println(F("AT+GMR"));
    if (wifi.readLine(buffer, sizeof(buffer))) {
      Serial.println(buffer);
      wifi.find(); // Discard the 'OK' that follows
    } else {
      Serial.println(F("error"));
    }
  
    Serial.print(F("Connecting to WiFi..."));
    if (wifi.connectToAP(F(ESP_SSID), F(ESP_PASS))) {
  
      // IP addr check isn't part of library yet, but we can manually request and place in a string.
      Serial.print(F("OK\nChecking IP addr..."));
      wifi.println(F("AT+CIFSR"));
      if (wifi.readLine(buffer, sizeof(buffer))) {
        Serial.println(buffer);
        wifi.find(); // Discard the 'OK' that follows
  
        Serial.print(F("Connecting to host..."));
  
        Serial.print("Connected..");
        wifi.println("AT+CIPMUX=0"); // configure for single connection,
        //we should only be connected to one SMTP server
        wifi.find();
        wifi.closeTCP(); // close any open TCP connections
        wifi.find();
  
      } else { // IP addr check failed
        Serial.println(F("error"));
      }
    } else { // WiFi connection failed
      Serial.println(F("FAIL"));
    }
    
    //The above code was used to get connected to Wi-Fi. At this point you must be already connected.
    
    Serial.println("Connecting...");
    uint32_t ip = getIP();
    Serial.print("ESP setup success, my IP addr:");
    if (ip) {
      Serial.println(ip, HEX);
    } else {
      Serial.println("none");
    }
  
    sendCheckReply("AT+CIPSTO=0", "OK");
    delay(1000);
  
  }
  // loops forever cause of while(1)
  void loop()
{
  delay(25);

  ESP_GETpage(HOST, 80);//calls the method ESP_GETpage()
  delay(2000);

  Serial.println(F("**********REPLY***********"));
  Serial.print(replybuffer);
  Serial.println(F("**************************"));

  sendCheckReply("AT+CIPCLOSE", "OK");

  debugLoop();

  delay(1000);

  while (1);
}

boolean ESP_GETpage(char const *host, uint16_t port) {//,char const *page
  String cmd = "AT+CIPSTART=\"TCP\",\"";//Establish TCP connection or register UDP port and start a connection

  cmd += host;
  cmd += "\",";
  cmd += port;
  cmd.toCharArray(replybuffer, REPLYBUFFSIZ);
  delay(1000);
  getReply(replybuffer);

  if (strcmp(replybuffer, "OK") != 0) {
    // this is OK! could be a version that says "Linked"
    if (strcmp(replybuffer, "Linked") != 0) {
      sendCheckReply("AT+CIPCLOSE", "OK");
      delay(1000);
      return false;
    }
  }

  request += " /pushingbox?devid=vCB2DD101A50CEFD&status=Yay!It worked!&submit=Submit";
  request += " HTTP/1.1\r\nHost: ";
  request += host;
  request += "\r\n\r\n";

  cmd = "AT+CIPSEND=";
  cmd += request.length();
  cmd.toCharArray(replybuffer, REPLYBUFFSIZ);
  sendCheckReply(replybuffer, ">");

  Serial.print("Sending: "); Serial.println(request.length());
  Serial.println(F("*********SENDING*********"));
  Serial.print(request);
  Serial.println(F("*************************"));

  request.toCharArray(replybuffer, REPLYBUFFSIZ);

  esp->println(request);

  while (true) {
    espreadline(3000);  // this is the 'echo' from the data
    Serial.print(">"); Serial.println(replybuffer); // probably the 'busy s...'

    // LOOK AT ALL THESE POSSIBLE ARBITRARY RESPONSES!!!
    if (strstr(replybuffer, "wrong syntax"))
      continue;
    else if (strstr(replybuffer, "ERROR"))
      continue;
    else if (strstr(replybuffer, "busy s..."))
      continue;
    else break;
  }

  if (! strstr(replybuffer, "SEND OK") ) return false;

  espreadline(1000);  Serial.print("3>"); Serial.println(replybuffer);
  char *s = strstr(replybuffer, "+IPD,");
  if (!s) return false;
  uint16_t len = atoi(s + 5);
  //Serial.print(len); Serial.println(" bytes total");

  int16_t contentlen = 0;
  while (1) {
    espreadline(50);
    s = strstr(replybuffer, "Content-Length: ");
    if (s) {
      //Serial.println(replybuffer);
      contentlen = atoi(s + 16);
      Serial.print(F("C-Len = ")); Serial.println(contentlen);
    }
    s = strstr(replybuffer, "Content-Type: ");
    if (s && contentlen) {
      int16_t i;
      char c;

      for (i = -2; i < contentlen; i++) { // eat the first 2 chars (\n\r)
        while (!esp->available());
        c = esp->read(); //UDR0 = c;
        if (i >= 0) {
          replybuffer[i] = c;
        }
      }
      replybuffer[i] = 0;
      return true;
    }
  }
}


uint32_t getIP() {   // get IP method of type uint32_t
  getReply("AT+CIFSR", 500, true);

  return 0;
}

uint8_t espreadline(uint16_t timeout, boolean multiline) { //espreadline method of type uint8_t
  uint16_t replyidx = 0;

  while (timeout--) {
    if (replyidx > REPLYBUFFSIZ - 1) break;

    while (esp->available()) {
      char c =  esp->read();
      if (c == '\r') continue;
      if (c == 0xA) {
        if (replyidx == 0)   // the first 0x0A is ignored
          continue;

        if (!multiline) {
          timeout = 0;         // the second 0x0A is the end of the line
          break;
        }
      }
      replybuffer[replyidx] = c;
      // Serial.print(c, HEX); Serial.print("#"); Serial.println(c);
      replyidx++;
    }

    if (timeout == 0) break;
    delay(1);
  }
  replybuffer[replyidx] = 0;  // null term
  return replyidx;
}

uint8_t getReply(char const*send, uint16_t timeout, boolean echo) { // getReply method of type uint8_t
  // flush input
  while (esp->available()) {
    esp->read();
  }

  if (echo) {
    Serial.print("---> "); Serial.println(send);
  }
  esp->println(send);

  // eat first reply sentence (echo)
  uint8_t readlen = espreadline(timeout);

  //Serial.print("echo? "); Serial.print(readlen); Serial.print(" vs "); Serial.println(strlen(send));

  if (strncmp(send, replybuffer, readlen) == 0) {
    // its an echo, read another line!
    readlen = espreadline();
  }

  if (echo) {
    Serial.print ("<--- "); Serial.println(replybuffer);
  }
  return readlen;
}

boolean sendCheckReply(char const *send, char const *reply, uint16_t timeout) {
  delay(1000);
  getReply(send, timeout, true);

  return (strcmp(replybuffer, reply) == 0);
}

void debugLoop() {
  while (1) {
    if (Serial.available()) {
      esp->write(Serial.read());//read serial
      delay(10);
    }
    if (esp->available()) {
      Serial.write(esp->read()); //read esp
      delay(10);
    }
  }
}
